# todo
# 1: create a docker image on init that exposes the ports if necessary
config:
  name: "pharmavillage"

images:
  # can be a github repo or a docker image as this will just pull into a location using git has benefits of ci/cd
  - "https://github.com/pharmavillage/event-store.git" 
  # this will automaticlly pull this and put it into a golang monorepo and make the module name the name of the repo and the source conig.name as same with every repository if there is no fork of the foreign repository make it and also reflect in the bundles resolitions field and swirch to the forked versoin

  tags:
    # - name: documentation
    channel: app
  npm_id:   - "https://github.com/pharmavillage/event-store.git" 
  proxy: true
langauge:
  # each langauge should be in a monorepo allowing for adons
  golang:
    version: "default" 
    # addons:
    #   - "rest-mongodriver"
    #   - "sql graph"

  # tags:
  #   # - name: documentation
  #   channel: app
  # npm_id:
  # proxy: true
# langauge:
#   # each langauge should be in a monorepo allowing for adons
#   golang:
#     version: "23.0"
#     addons:
#       - "rest-mongodriver"
#       - "sql graph"

# services:
#   # stuff like sql that will be needed for images just a ref
#   redis:
#     dockerpack: "https://github.com/pharmavillage/documentation.git"
#     tags:
#       - name: monolog.logger
#         channel: downloadRepository
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

#   mysql:
#     dockerpack: "https://github.com/pharmavillage/documentation.git"
#     networks:
#       - backend
#     healthcheck:
#       test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

#   nginx:
#     dockerpack: "https://github.com/pharmavillage/nginx-docker.git"
#     tags:
#       - name: webserver
#         channel: proxy
#     ports:
#       - "80:80"
#       - "443:443"
#     volumes:
#       - nginx-cache:/var/cache/nginx
#     networks:
#       - frontend
#       - backend
#     depends_on:
#       - documentation
#       - marketing

#   documentation:
#     repo: "https://github.com/pharmavillage/documentation.git"
#     build:
#       context: ./documentation
#       dockerfile: Dockerfile
#     ports:
#       - "8080:8080"
#     networks:
#       - frontend
#       - backend
#     depends_on:
#       - redis
#       - mysql

# modules:
#   tailwindconfig:
#     generate: true

# networks:
#   localhost:
#     - "pharmavillage"
#   reverse:
#     proxy: true
# # this will set up tailnet for the network

# environment:
#   development:
#     DATABASE_URL: "mysql://user:password@localhost:3306/dev_db"
#     REDIS_URL: "redis://localhost:6379"
#     NODE_ENV: "development"
#   production:
#     DATABASE_URL: "mysql://user:password@prod-host:3306/prod_db"
#     REDIS_URL: "redis://prod-host:6379"
#     NODE_ENV: "production"
#   test:
#     DATABASE_URL: "mysql://user:password@test-host:3306/test_db"
#     REDIS_URL: "redis://test-host:6379"
#     NODE_ENV: "test"

# secrets:
#   mysql_password:
#     file: ./secrets/mysql_password.txt
#   redis_password:
#     file: ./secrets/redis_password.txt
# # tasks:
# #   pre-deploy:
# #     description: "Run tasks before deployment"
# #     command: "npm run lint && npm run test"
# #   post-deploy:
# #     description: "Run tasks after deployment"
# #     command: "npm run migrate && npm run seed"
